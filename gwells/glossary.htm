<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Project Glossary</title>
<link href="./css/ea.css" rel="stylesheet" type="text/css" />
<script>
function initPage(src) {	
	if(parent==this&&(this.location+"").indexOf('EARoot')!=-1)
		document.location=(this.location+"").substring(0,(this.location+"").indexOf('EARoot'))+"index"+(this.location+"").substring((this.location+"").lastIndexOf('.'))+"?goto="+((this.location+"").substring((this.location+"").indexOf('EARoot')+7,(this.location+"").lastIndexOf('.')).replace(/\//g,':').replace(/EA/g,""));
	else
		parent.initPage(src);
}

function nameClassifier(name, separator)
{
  var str = name;
  var classifierName;
  var node = document.getElementById('name_classifier');
  if(node != null)
  {
    classifierName = node.innerHTML;
  }
  if(classifierName != "")
  {
   str += separator + classifierName;
  }
  
  return str;
}
</script>
</head>
<body onload="initPage(this);" class="Content">
<div class="pageHeader"></div>
	<table border="0" cellspacing="0" cellpadding="0" class="Table">
		<tr>
			<td width="16%" class="TableHeading">Item</td>
			<td width="8%" class="TableHeading">Type</td>
			<td width="76%" class="TableHeading">Meaning</td>
		</tr>
						<tr valign="top">
				<td width="16%" class="TableRow">image</td>
				<td width="8%" class="TableRow">technology</td>
				<td width="76%" class="TableRow">Docker images are the basis of containers. An Image is an ordered collection of root filesystem changes and the corresponding execution parameters for use within a container runtime. An image typically contains a union of layered filesystems stacked on top of each other. An image does not have state and it never changes.

(from https://docs.docker.com/glossary/?term=image)</td>
			</tr>			<tr valign="top">
				<td width="16%" class="TableRow">service</td>
				<td width="8%" class="TableRow">technology</td>
				<td width="76%" class="TableRow">A service is the definition of how you want to run your application containers in a swarm. At the most basic level a service defines which container image to run in the swarm and which commands to run in the container. For orchestration purposes, the service defines the “desired state”, meaning how many containers to run as tasks and constraints for deploying the containers.

Frequently a service is a microservice within the context of some larger application. Examples of services might include an HTTP server, a database, or any other type of executable program that you wish to run in a distributed environment.

(from https://docs.docker.com/glossary/?term=service)</td>
			</tr>			<tr valign="top">
				<td width="16%" class="TableRow">volume</td>
				<td width="8%" class="TableRow">technology</td>
				<td width="76%" class="TableRow">A volume is a specially-designated directory within one or more containers that bypasses the Union File System. Volumes are designed to persist data, independent of the container’s life cycle. Docker therefore never automatically delete volumes when you remove a container, nor will it “garbage collect” volumes that are no longer referenced by a container. Also known as: data volume

There are three types of volumes: host, anonymous, and named:

A host volume lives on the Docker host’s filesystem and can be accessed from within the container.

A named volume is a volume which Docker manages where on disk the volume is created, but it is given a name.

An anonymous volume is similar to a named volume, however, it can be difficult, to refer to the same volume over time when it is an anonymous volumes. Docker handle where the files are stored.

(from https://docs.docker.com/glossary/?term=volume)</td>
			</tr>
</table><div class="pageFooter"></div>
 
</body>
</html>